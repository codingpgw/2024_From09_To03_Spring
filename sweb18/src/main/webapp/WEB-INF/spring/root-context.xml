<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
    
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactoryBean"/>
    </bean>
    
    <!--mybatis-config.xml, mapper  -->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/> 
        <!--mybatis-config-->
        <property name="configLocation"   value="classpath:mybatis-config.xml"/>
        <!-- mapper설정 -->
        <property name="mapperLocations"  value="classpath:mapper/**/*.xml"/>
    </bean>
    
    <!-- fileupload 
         ID 변경하면 않됨
         10 * 1024 * 1024 : 10485760(byte)
         
         maxUploadSize : 파일 업로드 max 사이즈
         maxInMemorySize : 디스크에 저장하기 전 임시 파일을 생성하기 전 메모리 보관 최대 크기(byte)
    -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="maxUploadSize" value="10485760"></property>
        <property name="maxInMemorySize" value="20480"></property>
    </bean>    
    
    
    <!--  -->
    <tx:annotation-driven proxy-target-class="true" transaction-manager="transactionManager"/>
    
    <!-- 트랜잭션 Advice -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 
                name="up*" :up으로 시작하는 메서드는 트랜잭션을 적용한다.
                read-only="false" : DML 처리
                rollback-for="Exception" : 트랜잭션 롤백하는 조건 (Exception 발생시 롤백)
             -->
            <tx:method name="up*" read-only="false" rollback-for="Exception"/>
            <!-- up으로 시작하지 않는 모든 메서드 트랜잭션 제외 -->
            <tx:method name="*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    
    <aop:config>
        <aop:pointcut expression="execution(* com.pcwk.ehr..service.*Impl.up*(..))" id="txPointCut"/>
        <!-- advisor : advice + pointcut -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
    </aop:config>
    
    <!--  -->
    <bean id="dummyMailSender" class="com.pcwk.ehr.user.service.DummyMailSender">
    </bean>
    
    <!-- email smtp 설정 -->
    <!-- <bean id="mailSenderImpl" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="smtp.naver.com"></property>
        <property name="port" value="465"></property>
        <property name="username" value="1026rjsdnd@naver.com"></property>
        <property name="password" value=""></property>
        <property name="defaultEncoding" value="utf-8"></property>
        SSL
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.host">smtp.naver.com</prop>
                <prop key="mail.smtp.port">465</prop>
                <prop key="mail.smtp.auth">true</prop>
                <prop key="mail.smtp.ssl.protocols">TLSv1.2</prop>
                <prop key="mail.smtp.ssl.enable">true</prop>
                <prop key="mail.smtp.ssl.trust">smtp.naver.com</prop>
                <prop key="mail.debug">true</prop>
            </props>
        </property>
    </bean> -->
    <!--  -->
    
    <!-- 트랜잭션 매니저 빈 등록 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    
    <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource">
        <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"></property>
        <property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:xe"></property>
        <property name="username" value="scott"></property>
        <property name="password" value="pcwk"></property>
        
        <!-- <property name="jdbcUrl" value="jdbc:oracle:thin:218.144.130.138:1522:xe"></property> -->
        <!-- Optional settings -->
        <property name="maximumPoolSize" value="10"></property>
        <property name="minimumIdle" value="5"></property>
        <property name="connectionTimeout" value="30000"></property>
        <property name="idleTimeout" value="600000"></property>
        <property name="maxLifetime" value="1800000"></property>
        <!-- 
        maximumPoolSize : 풀에 유지할 최대 연결 수
        minimumIdle : 유효 상태로 유지할 수 있는 최소 연결 수
        connectionTimeout : 연결 시도 시 타임아웃 설정(밀리 초)
        idleTimeout : 유휴 연결이 풀에서 제거되기 전 대기 시간(밀리 초)
        maxLifetime : 연결이 풀에서 제거되기 전 최대 생존 시간(밀리 초)
         -->
    </bean>
    
    <bean id="testUserService" class="com.pcwk.ehr.user.service.TestUserService">
        <constructor-arg index="0" value="james04"></constructor-arg>
    </bean>
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
   
</beans>
